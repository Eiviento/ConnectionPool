连接池记录

MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信和unique_lock、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型

单例模式：
	每一个连接池在程序中只生成一个实例对象，使用的是线程安全的懒汉模式。
	
lambda表达式：我们在进行测试的时候,会创建多个线程，线程函数的具体实现我们 使用的是lambda表达式。不需要创建额外的函数，直接通过lambda表达式进行连接以及数据的插入。
用户获取的连接用shared_ptr智能指针来管理，用lambda表达式定制连接释放的功能（不真正释放连接，而是把连接归还到连接池中）

这种写法主要用于资源管理场景，特别是当你需要在 shared_ptr 被销毁时执行一些自定义的清理或资源再利用操作。
在这种情况下，Connection 对象被拿出来使用，当它不再需要时，通过自定义删除器，将其重新放回连接池队列中，而不是直接销毁。这保证了连接的复用，同时确保了多线程环境下的安全性。

queue队列：我们的连接池对象他其实就是一个queue的队列，里面存放的是我们自己定义的一个类的类型（connection）。队列的他的好处就是先进先出，符合我们连接池取出一个连接的需求。当连接使用完毕的时候我们会重新将其放回到队列当中。front()，pop()，push()等操作。

多线程编程：

线程互斥：我们在连接池对象中是有一个 _connectionCnt,用于记录当前所创建的connection连接的总数量。
我们对每一个连接进行分配的时候肯定是要对我们的这个连接池队列进行一个互斥的访问，不然就有可能出现连接池中的一个连接分配给了很多个对象，这些对象其实是用的同一个连接，就会出现问题。




项目背景
	为了提高MySQL数据库（基于C/S设计）的访问瓶颈，除了在服务器端增加缓存服务器缓存常用的数据之外（例如redis），还可以增加连接池，来提高MySQL Server的访问效率，在高并发情况下，大量的TCP三次握手、MySQL Server连接认证、MySQL Server关闭连接回收资源和TCP四次挥手所耗费的性能时间也是很明显的，增加连接池就是为了减少这一部分的性能损耗。 
	在市场上比较流行的连接池包括阿里的druid，c3p0以及apache dbcp连接池，它们对于短时间内大量的数据库增删改查操作性能的提升是很明显的，但是它们有一个共同点就是，全部由Java实现的。
	那么本项目就是为了在C/C++项目中，提供MySQL Server的访问效率，实现基于C++代码的数据库连接
池模块。


连接池功能点介绍
	连接池一般包含了数据库连接所用的ip地址、port端口号、用户名和密码以及其它的性能参数，例如初始连接量，最大连接量，最大空闲时间、连接超时时间等，该项目是基于C++语言实现的连接池，主要也是实现以上几个所有连接池都支持的通用基础功能。
	初始连接量（initSize）：表示连接池事先会和MySQL Server创建initSize个数的connection连接，当应用发起MySQL访问时，不用再创建和MySQL Server新的连接，直接从连接池中获取一个可用的连接就可以，使用完成后，并不去释放connection，而是把当前connection再归还到连接池当中。
	最大连接量（maxSize）：当并发访问MySQL Server的请求增多时，初始连接量已经不够使用了，此时会根据新的请求数量去创建更多的连接给应用去使用，但是新创建的连接数量上限是maxSize，不能无限制的创建连接，因为每一个连接都会占用一个socket资源，一般连接池和服务器程序是部署在一台主机上的，如果连接池占用过多的socket资源，那么服务器就不能接收太多的客户端请求了。当这些连接使用完成后，再次归还到连接池当中来维护。
	最大空闲时间（maxIdleTime）：当访问MySQL的并发请求多了以后，连接池里面的连接数量会动态增加，上限是maxSize个，当这些连接用完再次归还到连接池当中。如果在指定的maxIdleTime里面，
	这些新增加的连接都没有被再次使用过，那么新增加的这些连接资源就要被回收掉，只需要保持初始连接量initSize个连接就可以了。
	连接超时时间（connectionTimeout）：当MySQL的并发请求量过大，连接池中的连接数量已经到达maxSize了，而此时没有空闲的连接可供使用，那么此时应用从连接池获取连接无法成功，它通过阻塞的方式获取连接的时间如果超过connectionTimeout时间，那么获取连接失败，无法访问数据库。
该项目主要实现上述的连接池四大功能，其余连接池更多的扩展功能，可以自行实现。

